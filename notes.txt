//JS
obj.method?.() //optional chaining for methods

Object property keys can be either strings or symbols (no boolean, number etc.)
symbol = unique identifier
Symbol() creates value of symbol type

let id = Symbol('desc') id is symbol with description desc

to convert symbols to string use toString..auto type conversion is not there

symbolName.description returns the description

symbols can create hidden properties

user[id] = 'someId'

but if you print user object, symbol key will not be there

//forin loop, object.keys ignore symbols but object.assign copies symbols
======================================
// read from the global registry
let id = Symbol.for("id"); // if the symbol did not exist, it is created

// read it again (maybe from another part of the code)
let idAgain = Symbol.for("id");

// the same symbol
alert( id === idAgain ); // true
========================================
Symbol.keyFor(sym), that does the reverse: returns a name by a global symbol.

Symbol.for(symbolName) returns Symbol
Symbol.keyFor(symbol) returns key

System Symbols are used by JS internally ex. Symbol.hasInstance
==============================================================
obj1+obj2 or obj*obj  objs are converrted tto premitives and then operation is carried out ,
in case of normal objects only + returns two bjects, else all return NaN

in Date object, date1 -date2  == object to Num conversion occurs


the one which stores only one value = primitive
the onbe which stores multiple values = collections (objects)

str.toUpperCase() here a special String object is created, does conversion and destroys

{} , [] are truthy

null and undefined have no methods, no wrapper objects

100_000 //new syntactic sugar for numbers

1e9 for nine zeroes after 1
1e-3 = 0.001

num.toString(base) returns number in that base system

Math.trunc removes every num after decimal without rounding

let arr = [1,3,5]
console.log(Math.max(...arr)) //for max and min

' \'Hello\' '  =  'hello'    \ escapes '

string.length is a numeric property no a function in JS

str.charAt(0) = str[0]
str[1000] = undefined    str.chartAt(1000) = ''

for (let char of "Hello") {
  alert(char); // H,e,l,l,o (char becomes "H", then "e", then "l" etc)
}

Strings are immutable

str[0]='L'  //error

str.codePointAt(pos)
Returns the code for the character at position pos:

// different case letters have different codes
alert( "z".codePointAt(0) ); // 122
alert( "Z".codePointAt(0) ); // 90

String.fromCodePoint(code) //reverse

str.repeat(n) – repeats the string n times.

an Array can store collection of anything(even functions!)
trailing commas are allowed in arrays and objects

push~unshift   pop~shift

for..of loop for array elements 
for in loop for indexes

let arr = [1,3,5,,9]
console.log(arr.length) //5

let arr = new Array(2)
//with single argument
console.log(arr)


multidimentional arrays are posible
let matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];

alert( matrix[1][1] ); // 5, the central element

alert( 0 == [] ); // true
alert('0' == [] ); // false
alert( [] == [] ); // false
alert( [0] == [0] ); // false

let arr = ["t", "e", "s", "t"];
alert( arr.slice(1, 3) ); // e,s (copy from 1 to 3)
alert( arr.slice(-2) ); // s,t (copy from -2 till the end)


let arr = [1, 2];
// create an array from: arr and [3,4]
alert( arr.concat([3, 4]) ); // 1,2,3,4
alert( arr.concat([3, 4], 5, 6) ); // 1,2,3,4,5,6

arr.splice(start, deleteCount, elem1, ..., elemN])
It modifies arr starting from the index start: removes deleteCount elements and then inserts elem1, ..., elemN at their place. Returns the array of removed elements.

let result = arr.find(function(item, index, array) {
  // if true is returned, item is returned and iteration is stopped
  // for falsy scenario returns undefined
});

let arr = [ 1, 2, 15 ];
// the method reorders the content of arr
arr.sort();
alert( arr );  // 1, 15, 2  //arrays are sorted as strings by default


arr.flat() = [[1,2],[3]] = [1,2,3]

Iterables are objects that implement the Symbol.iterator method, as described above.
Array-likes are objects that have indexes and length, so they look like arrays.
let arrayLike = { // has indexes and length => array-like
  0: "Hello",
  1: "World",
  length: 2
};

There’s a universal method Array.from that takes an iterable or array-like value and makes a “real” Array from it. Then we can call array methods on it.

let arrayLike = {
  0: "Hello",
  1: "World",
  length: 2
};

console.log(Array.from('hello')) //[h,e,l...]
console.log(Array.from(arrayLike)) //)["Hello","World"]

let arrayLike2 = {
  0: "Hello",
  1: "World",
  length: 3
};  //["Hello","World",undefined]

===========================================================================
Map is a collection of keyed data items, just like an Object. But the main difference is that Map allows keys of any type.
let map = new Map() – creates the map.
map.set(key, value) – stores the value by the key.
map.get(key) – returns the value by the key, undefined if key doesn’t exist in map.
map.has(key) – returns true if the key exists, false otherwise.
map.delete(key) – removes the value by the key.
map.clear() – removes everything from the map.
map.size – returns the current element count.

Map can also use objects as keys. 

map.keys() – returns an iterable for keys,
map.values() – returns an iterable for values,
map.entries() – returns an iterable for entries [key, value], it’s used by default in for..of.

to create map from object 
let map = new Map(Object.entries(obj));

let prices = Object.fromEntries([
  ['banana', 1],
  ['orange', 2],
  ['meat', 4]
]);  //creating object from map

Set is like an array (i.e without keys) which has unique elements(no repeating)
new Set(iterable) – creates the set, and if an iterable object is provided (usually an array), copies values from it into the set.
set.add(value) – adds a value, returns the set itself.
set.delete(value) – removes the value, returns true if value existed at the moment of the call, otherwise false.
set.has(value) – returns true if the value exists in the set, otherwise false.
set.clear() – removes everything from the set.
set.size – is the elements count.

set.keys() – returns an iterable object for values,
set.values() – same as set.keys(), for compatibility with Map,
set.entries() – returns an iterable object for entries [value, value], exists for compatibility with Map.



================================================================================
The first difference between Map and WeakMap is that keys must be objects, not primitive values:
let weakMap = new WeakMap();
let obj = {};
weakMap.set(obj, "ok"); // works fine (object key)
// can't use a string as the key
weakMap.set("test", "Whoops"); // Error, because "test" is not an object
WeakMap does not support iteration and methods keys(), values(), entries(), so there’s no way to get all keys or values from it.
weakMap.get(key)
weakMap.set(key, value)
weakMap.delete(key)
weakMap.has(key)

the When the weakMap key i.e Object is deleted , the value of it is removed automatically.
weakMap.set(john, "secret documents");
// if john dies, secret documents will be destroyed automatically


weakSet
It is analogous to Set, but we may only add objects to WeakSet (not primitives).
================================================
destructuring
let [name = "Guest", surname = "Anonymous"] = ["Julius"];   

let {width: w, height: h, title} = options;

=========================
let date = new Date(2013, 0, 32); // 32 Jan 2013 ?!?
alert(date); // ...is 1st Feb 2013!   //it does auto correction

There’s a special method Date.now() that returns the current timestamp = new Date().getTime()


Date.parse(YYYY-MM-DDTHH:mm:ss.sssZ) parses date from string  it will give timestamp in ms
benchmarking is the process of measuring speed/memory usage/performance etc. of functions
   
Strings use double quotes. No single quotes or backticks in JSON. 
// a number in JSON is just a number
alert( JSON.stringify(1) ) // 1
// a string in JSON is still a string, but double-quoted
alert( JSON.stringify('test') ) // "test"
alert( JSON.stringify(true) ); // true
alert( JSON.stringify([1, 2, 3]) ); // [1,2,3]

JSON Ignores below things as it is only data-only
Function properties (methods).
Symbolic keys and values.
Properties that store undefined.

There must not any circular refernces 
let room = {
  number: 23
};
let meetup = {
  title: "Conference",
  participants: ["john", "ann"]
};
meetup.place = room;       // meetup references room
room.occupiedBy = meetup; // room references meetup
JSON.stringify(meetup); // Error: Converting circular structure to JSON Here, the conversion fails, because of circular reference: room.occupiedBy references meetup, and meetup.place references room:

alert(JSON.stringify(user, null, 2));
/* two-space indents:

we can set a custom toJSON method in an object
let room = {
  number: 23,
  toJSON() {
    return this.number;
  }
};

If an object has toJSON, then it is called by JSON.stringify.
===================================================================================
Most engines allow 100000 iterations recursion

The linked list element is recursively defined as an object with:
value.
next property referencing the next linked list element or null if that’s the end.
let list = {
  value: 1,
  next: {
    value: 2,
    next: {
      value: 3,
      next: {
        value: 4,
        next: null
      }
    }
  }
};
===============================================================================
The rest parameters must be at the end
The rest parameters gather all remaining arguments, so the following does not make sense and causes an error:
rest - parameters  & Spread operator
function showName(firstName, lastName, ...titles) {
titles is an array

arrow functions dont have arguments object

...arguments  makes array of remaining arguments = rest
...arr expands and makes array elements free = spread   Math.max(...arr)

let str = "Hello"; 
alert( [...str] ); // H,e,l,l,o

A closure is a function that remembers its outer variables and can access them. in JavaScript, all functions are naturally closures 

IIFEs were invented to get block scope for var
var allows redeclarations

In a browser, global functions and variables declared with var (not let/const!) become the property of the global object:
var gVar = 5;
alert(window.gVar); // 5 (became a property of the global object)

function sayHi() {
  alert("Hi");
}

alert(sayHi.name); // sayHi   sayHi.length //length of parameters

function getFunc() {
  let value = "test";
  let func = new Function('alert(value)'); //'new' functions are not closures
  return func;
}
getFunc()(); // error: value is not defined


Novice developers sometimes make a mistake by adding brackets () after the function:
// wrong!
setTimeout(sayHi(), 1000);
That doesn’t work, because setTimeout expects a reference to a function. 
setTimeout(sayHi, 1000); //correct

for cancelling with clearTimeout(id) 
let id = setTimeout(...

setTimeout(() => alert("World"));
alert("Hello"); //Hello World not world Hello...cause it invokes it after comple script execution

Object property have three flags (all true by default)
writable – if true, the value can be changed, otherwise it’s read-only.
enumerable – if true, then listed in loops, otherwise not listed.
configurable – if true, the property can be deleted and these attributes can be modified, otherwise not.

let descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);
{
value: {...},//object itself
writable:true,
enumerable:true,
configurable:true
}
JSON.stringify(descriptor, null, 2 ) //to format object well :)

to change the property
Object.defineProperty(obj, propertyName, descriptor)
Object.defineProperty(user, "name", {
  value: "John"
}); //all flags become falsy

Object.defineProperty(user, "name", {
  writable: false
}); //we can't change user.name

for new properties we need to explicitly list what's true
Making a property non-configurable is a one-way road. We cannot change it back with defineProperty.

Object.defineProperties(obj, {
  prop1: descriptor1,
  prop2: descriptor2
  // ...
});

Object.preventExtensions(obj)
Forbids the addition of new properties to the object.
Object.seal(obj)
Forbids adding/removing of properties. Sets configurable: false for all existing properties.
Object.freeze(obj)
Forbids adding/removing/changing of properties. Sets configurable: false, writable: false for all existing properties.
And also there are tests for them:

Object.isExtensible(obj)
Returns false if adding properties is forbidden, otherwise true.
Object.isSealed(obj)
Returns true if adding/removing properties is forbidden, and all existing properties have configurable: false.
Object.isFrozen(obj)
Returns true if adding/removing/changing properties is forbidden, and all current properties are configurable: false, writable: false.

Object properties have two types : data & Accessor
accesors are essentially functions that execute on getting and setting a value, but look like regular properties to an external code.
In an object literal they are denoted by get and set:

let obj = {
  get propName() {
    // getter, the code executed on getting obj.propName
  },
  set propName(value) {
    // setter, the code executed on setting obj.propName = value
  }
};

let user = {
  name: "John",
  surname: "Smith",
  get fullName() {
    return `${this.name} ${this.surname}`;
  }
};
alert(user.fullName); // John Smith   As of now, fullName has only a getter. If we attempt to assign user.fullName=, there will be an error:


==============================================================================
When we read a property from object, and it’s missing, JavaScript automatically takes it from the prototype.
In programming, such thing is called “prototypal inheritance”.
The property [[Prototype]] is internal and hidden, but it can be accessed as __proto__
rabbit.__proto__ = animal; // sets rabbit.[[Prototype]] = animal

Now if we read a property from rabbit, and it’s missing, JavaScript will automatically take it from animal.The prototype chain can be longer:
The references can’t go in circles. JavaScript will throw an error if we try to assign __proto__ in a circle.
The value of __proto__ can be either an object or null. Other types are ignored. there can be only one [[Prototype]]. An object may not inherit from two others.
The prototype is only used for reading properties.Write/delete operations work directly with the object.

No matter where the method is found: in an object or its prototype. In a method call, 'this' is always the object before the dot.

// Object.keys only returns own keys
alert(Object.keys(rabbit)); // jumps

// for..in loops over both own and inherited keys
for(let prop in rabbit) alert(prop); // jumps, then eats

there’s a built-in method obj.hasOwnProperty(key): it returns true if obj has its own (not inherited) property named key.

prototype property in new F() constructor object
F.prototype property is only used when new F is called, it assigns [[Prototype]] of the new object.  ex. Rabbit.prototype = animal;

when no prototype is set , it takes values, functions etc. from Object.prototype. So then when obj.toString() is called the method is taken from Object.prototype.
for arrays Array.prototype

String.prototype.show = function() {
  alert(this);
};
"BOOM!".show(); // BOOM!
=============================
let animal = {
  eats: true
};
// create a new object with animal as a prototype
let rabbit = Object.create(animal);
alert(rabbit.eats); // true
alert(Object.getPrototypeOf(rabbit) === animal); // true
Object.setPrototypeOf(rabbit, {}); // change the prototype of rabbit to {}
===========================================
let obj = Object.create(null);
alert(obj); // Error (no toString)

We cannot add methods to constructor function objects, so we need prototype
User.prototype.show()
=======================================================================

Classes

class MyClass {
  // class methods
  constructor() { ... }
  method1() { ... }
  method2() { ... }
  method3() { ... }
  ...
}
Then use new MyClass() to create a new object with all the listed methods.
The constructor() method is called automatically by new, so we can initialize the object there.

class User {
  constructor() {}
}
alert(typeof User); // function
User(); // Error: Class constructor User cannot be invoked without 'new'
Classes always use strict.

Class Expression 
let User = class {
  sayHi() {
    alert("Hello");
  }
};

“Class fields” is a syntax that allows to add any properties.
class User {
  name = "John";
}

we can use extends keyword to implement class inheritence
it uses prototype mehanism, if method not found in class2 then finds it in class1

Class syntax allows to specify not just a class, but any expression after extends.
class User extends f("Hello") {}

the method can be completely overrriden in child using same method name

super.method(...) to call a parent method.
super(...) to call a parent constructor (inside our constructor only).


  stop() {
    super.stop(); // call parent stop
    this.hide(); // and then hide
  }
  
  Arrow functions have no super
  If accessed, it’s taken from the outer function
  if a class extends another class and has no constructor, then the following “empty” constructor is generated:
  
  class Rabbit extends Animal {
  // generated for extending classes without own constructors
  constructor(...args) {
    super(...args);
  }
}

As we can see, it basically calls the parent constructor passing it all the arguments. That happens if we don’t write a constructor of our own.
Constructors in inheriting classes must call super(...), and (!) do it before using this
parent constructor always uses its own field value, not the overridden one.

we can declare static methods in a class, they can be called by Class name iteself and not by its object , coz they are created in class func itself and not in its protottype
class User {
  static staticMethod() {
    alert(this === User);
  }
}

User.staticMethod(); // true

class Article {
  static publisher = "Ilya Kantor";
}

alert( Article.publisher ); // Ilya Kantor   Static properties and methods are inherited.



In JavaScript, there are two types of object fields (properties and methods):

Public: accessible from anywhere. They comprise the external interface. Until now we were only using public properties and methods.
Private: accessible only from inside the class. These are for the internal interface.

Privates should start with #. They are only accessible from inside the class.

For instance, here’s a private #waterLimit property and the water-checking private method #checkWater:
class CoffeeMachine {
  #waterLimit = 200;
  
  Built-in classes like Array, Map and others are extendable also.
  
  obj instanceof Class
It returns true if obj belongs to the Class or a class inheriting from it.

let arr = [1, 2, 3];
alert( arr instanceof Array ); // true
alert( arr instanceof Object ); // true
------------------------------------------------------------------------------------

a mixin is a class containing methods that can be used by other classes without a need to inherit from it.
The simplest way to implement a mixin in JavaScript is to make an object with useful methods, so that we can easily merge them into a prototype of any class.
let sayHiMixin = {
  sayHi() {
    alert(`Hello ${this.name}`);
  },
  sayBye() {
    alert(`Bye ${this.name}`);
  }
};
// usage:
class User {
  constructor(name) {
    this.name = name;
  }
}
// copy the methods
Object.assign(User.prototype, sayHiMixin);
// now User can say hi
new User("Dude").sayHi(); // Hello Dude! There’s no inheritance, but a simple method copying.

==========================================================
If an exception happens in “scheduled” code, like in setTimeout, then try..catch won’t catch it:
try catch works synchronously
try {
  setTimeout(function() {
    noSuchVariable; // script will die here
  }, 1000);
} catch (e) {
  alert( "won't work" );
}

There should be nothing in between try and catch blocks
the carch error object contains atleast name and message of errror

The throw operator generates an error. (for throwing error without waiting for catch)
let error = new Error(message);
// or
let error = new SyntaxError(message);
let error = new ReferenceError(message);

let error = new Error("Things happen o_O");
alert(error.name); // Error
alert(error.message); // Things happen o_O

using throw   , we can throw anything even a number or string
if (!user.name) {
    throw new SyntaxError("Incomplete data: no name"); // (*)
  }

rethrowing
Catch gets all errors.
In the catch(err) {...} block we analyze the error object err.
If we don’t know how to handle it, we do throw err.

try {
   ... try to execute the code ...
} catch(e) {
   ... handle errors ...
} finally {
   ... execute always ...    
}  
finally runs in both cases , cattch can be omitted if u are using finally

window.onerror = function(message, url, line, col, error) {
  // ...
};
for global error catching it will have message , url, error etc.


custome error below
class ValidationError extends Error {
  constructor(message) {
    super(message); // (1)
    this.name = "ValidationError"; // (2)
  }
}
function test() {
  throw new ValidationError("Whoops!");
}

===============================Promises====================================================================
The constructor syntax for a promise object is:

let promise = new Promise(function(resolve, reject) {
  // executor (the producing code, "singer")
});

The promise object returned by the new Promise constructor has these internal properties:
state — initially "pending", then changes to either "fulfilled" when resolve is called or "rejected" when reject is called.
result — initially undefined, then changes to value when resolve(value) called or error when reject(error) is called.

The executor is called automatically and immediately (by new Promise).
resolve and reject are functions provided by JS, we call them when necessary

A promise that is either resolved or rejected is called “settled”, as opposed to an initially “pending” promise.
So a promise may be pending or settled
The executor should call only one resolve or one reject. Any state change is final.
All further calls of resolve and reject are ignored:

The properties state and result of the Promise object are internal. We can’t directly access them. We can use the methods .then/.catch/.finally for that. 

Consumers*
let promise = new Promise(function(resolve, reject) {
  // executor (the producing code, "singer")
});
promise.then(
res=>{},
err=>{}
);

The call .catch(f) is a complete analog of .then(null, f), it’s just a shorthand.

The call .finally(f) is similar to .then(f, f) in the sense that f always runs when the promise is settled: be it resolve or reject.
finally is a good handler for performing cleanup, e.g. stopping our loading indicators, as they are not needed anymore, no matter what the outcome is.
A finally handler has no arguments. In finally we don’t know whether the promise is successful or not. That’s all right, as our task is usually to perform “general” finalizing procedures.

returning a new promise in a then callback function is called promises chaining

.then(function(result) {
  return new Promise((resolve, reject) => { // (*)
    setTimeout(() => resolve(result * 2), 1000);
  })
}).then(function(result) { // (**)
  alert(result); // 2
  return new Promise((resolve, reject) => {
    setTimeout(() => resolve(result * 2), 1000);
  })

To be precise, a handler may return not exactly a promise, but a so-called “thenable” object – an arbitrary object that has a method .then. It will be treated the same way as a promise


handle any unhandled error:) imp***

window.addEventListener('unhandledrejection', function(event) {
  // the event object has two special properties:
  alert(event.promise); // [object Promise] - the promise that generated the error
  alert(event.reason); // Error: Whoops! - the unhandled error object
});
new Promise(function() {
  throw new Error("Whoops!");
});  // no catch to handle the error

There are 5 static methods in the Promise class. 
1.
let promise = Promise.all([...promises...]);
Promise.all takes an array of promises (it technically can be any iterable, but is usually an array) and returns a new promise.
Promise.all([
  new Promise(resolve => setTimeout(() => resolve(1), 3000)), // 1
  new Promise(resolve => setTimeout(() => resolve(2), 2000)), // 2
  new Promise(resolve => setTimeout(() => resolve(3), 1000))  // 3
]).then(alert);
Even though the first promise takes the longest time to resolve, it’s still first in the array of results.
If any of the promises is rejected, the promise returned by Promise.all immediately rejects with that error.

2. Promise.allSettled 
just waits for all promises to settle, regardless of the result. The resulting array has:
{status:"fulfilled", value:result} for successful responses,
{status:"rejected", reason:error} for errors.

3.Promise.race()
Similar to Promise.all, but waits only for the first settled promise and gets its result (or error).
let promise = Promise.race(iterable);

4.Promise.any
Similar to Promise.race, but waits only for the first fulfilled promise and gets its result. If all of the given promises are rejected, then the returned promise is rejected with AggregateError – a special error object that stores all promise errors in its errors property.

======================================================================================================
Async await

The word “async” before a function means one simple thing: a function always returns a promise. 
this function returns a resolved promise with the result of 1; let’s test it:
async function f() {
  return 1;
}
f().then(alert); // 1
err=>console.log(err)  has a shortand (console.log)
res=>alert(res)   // (alert)

…We could explicitly return a promise, which would be the same:
async function f() {
  return Promise.resolve(1);
}
f().then(alert); // 1

--------------------
// works only inside async functions
let value = await promise;
The keyword await makes JavaScript wait until that promise settles and returns its result.


for usingg await in top level code
(async () => {
  let response = await fetch('/article/promise-chaining/user.json');
  let user = await response.json();
  ...
})();
To declare an async class method, just prepend it with async:

use try catch with async await for error handelling
async function f() {

  try {
    let response = await fetch('http://no-such-url');
  } catch(err) {
    alert(err); // TypeError: failed to fetch
  }
}

or

async function f() {
  let response = await fetch('http://no-such-url');
}
// f() becomes a rejected promise
f().catch(alert); // TypeError: failed to fetch // (*)

====================================================================================
Generators

normal functions can return one value
generators are special functions that can return multiple values on demand
function* generateSequence() {
  yield 1;
  yield 2;
  return 3;
}
When such function is called, it doesn’t run its code. Instead it returns a special object, called “generator object”, to manage the execution.
let generator = generateSequence();
alert(generator); // [object Generator]
The main method of a generator is next()
The result of next() is always an object with two properties:
value: the yielded value.
done: true if the function code has finished, otherwise false.

let generator = generateSequence();
let one = generator.next();
alert(JSON.stringify(one)); // {value: 1, done: false}
Let’s call generator.next() again. It resumes the code execution and returns the next yield:
let three = generator.next();
alert(JSON.stringify(three)); // {value: 3, done: true}

generators are iterable. i.e.We can loop over their values using for..of:
It’s because for..of iteration ignores the last value, when done: true

done is true only for return ... not for yields
let sequence = [0, ...generateSequence()];

function* generatePasswordCodes() {
  // 0..9
  yield* generateSequence(48, 57); //for composing generators one in another
  
  generator.next(4); //for passing the value
  generator.throw(err) to throw error
  
  
  Symbol.iterator() method is called by for...of loop
  
  ===================================================================
  Module is a script file which can be exported and imported
  
  As modules support special keywords and features, we must tell the browser that a script should be treated as a module, by using the attribute <script type="module">.
  Modules always use strict
  Each module has its own top-level scope. In other words, top-level variables and functions from a module are not seen in other scripts.
  A module code is evaluated only the first time when imported
  
  The object import.meta contains the information about the current module. ex.  import.meta.url
  
  In a module, top-level 'this' is undefined.

in non module scripts 'this' is window object
<script async type="module">
for modules async works on inline scripts

we can export separately
// 📁 say.js
function sayHi(user) {
  alert(`Hello, ${user}!`);
}
function sayBye(user) {
  alert(`Bye, ${user}!`);
}
export {sayHi, sayBye}; 


if there’s a lot to import, we can import everything as an object using import * as <obj>, for instance:
// 📁 main.js
import * as say from './say.js';
say.sayHi('John');
say.sayBye('John');

import {sayHi as hi, sayBye as bye} from './say.js';
export {sayHi as hi, sayBye as bye};

import and exports must be in top-level code
==========================================================
dynamic imports
The import(module) expression loads the module and returns a promise that resolves into a module object that contains all its exports. It can be called from any place in the code.
let modulePath = prompt("Which module to load?");

import(modulePath)
  .then(obj => <module object>)
  .catch(err => <loading error, e.g. if no such module>)

  let module = await import(modulePath) if inside an async function.

  let {hi, bye} = await import('./say.js');

  for defaults
  let { default:say } = await import('./say.js');

  ================================================================.
  A Proxy object wraps another object and intercepts operations,
  let proxy = new Proxy(target, handler)
  target – is an object to wrap, can be anything, including functions.
handler – proxy configuration: an object with “traps”, methods that intercept operations. – e.g. get trap for reading a property of target, set trap for writing a property into target, and so on.

let target = {};
let proxy = new Proxy(target, {}); // empty handler
proxy.test = 5; // writing to proxy (1)
alert(target.test); // 5, the property appeared in target!
alert(proxy.test); // 5, we can read it from proxy too (2)
for(let key in proxy) alert(key); // test, iteration works (3)
As there are no traps, all operations on proxy are forwarded to target.

The Reflect API is designed to complement Proxy. For any Proxy trap, there’s a Reflect call with same arguments. We should use those to forward calls to target objects.


--------------------------------------------
A string of code may be long, contain line breaks, function declarations, variables and so on.

The result of eval is the result of the last statement.
let value = eval('let i = 0; ++i');
alert(value); // 1

it can see outer variables (not in strict mode)


==========================================================

Currying is a transformation of functions that translates a function from callable as f(a, b, c) into callable as f(a)(b)(c).

let sum = (a,b) =>{
  return a + b
}
console.log(sum(10,2))

let sumCurry = a => {
  return b => {
    return a+b
  }
}


a functions returns another function and at the most internal has the logic
console.log(sumCurry(2)(3))


A function that uses rest parameters, such as f(...args), can’t be curried this way.

=================tageed templates===========

function func (stringsArray,firstParam,secondParam){


}

func`wholeString is received in an array, ${firstParam} ${secondParam}`
















